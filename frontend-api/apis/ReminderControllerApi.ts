/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Appointment,
  AuthReq,
  Contact,
  ContactEmailReq,
  Customer,
  EventListRsp,
  NewAppointmentReq,
  RegisterCustomerReq,
  RegistrationReq,
  User,
} from '../models/index';
import {
    AppointmentFromJSON,
    AppointmentToJSON,
    AuthReqFromJSON,
    AuthReqToJSON,
    ContactFromJSON,
    ContactToJSON,
    ContactEmailReqFromJSON,
    ContactEmailReqToJSON,
    CustomerFromJSON,
    CustomerToJSON,
    EventListRspFromJSON,
    EventListRspToJSON,
    NewAppointmentReqFromJSON,
    NewAppointmentReqToJSON,
    RegisterCustomerReqFromJSON,
    RegisterCustomerReqToJSON,
    RegistrationReqFromJSON,
    RegistrationReqToJSON,
    UserFromJSON,
    UserToJSON,
} from '../models/index';

export interface AddContactEmailRequest {
    contactEmailReq: ContactEmailReq;
}

export interface AddCustomerRequest {
    contactId: number;
    registerCustomerReq: RegisterCustomerReq;
}

export interface AddUserRequest {
    registrationReq: RegistrationReq;
}

export interface AuthenticationRequest {
    authReq: AuthReq;
}

export interface DeleteAppointmentRequest {
    appointmentId: number;
}

export interface DeleteContactEmailRequest {
    contactEmailReq: ContactEmailReq;
}

export interface GetAllAppointmentByCustomerIdRequest {
    customerId: number;
}

export interface GetAllCustomersByUserIdRequest {
    userId: number;
}

export interface GetEventsByUserIdRequest {
    userId: number;
}

export interface SaveAppointmentRequest {
    newAppointmentReq: NewAppointmentReq;
}

/**
 * 
 */
export class ReminderControllerApi extends runtime.BaseAPI {

    /**
     */
    async addContactEmailRaw(requestParameters: AddContactEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['contactEmailReq'] == null) {
            throw new runtime.RequiredError(
                'contactEmailReq',
                'Required parameter "contactEmailReq" was null or undefined when calling addContactEmail().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/addContactEmail`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ContactEmailReqToJSON(requestParameters['contactEmailReq']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async addContactEmail(requestParameters: AddContactEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addContactEmailRaw(requestParameters, initOverrides);
    }

    /**
     */
    async addCustomerRaw(requestParameters: AddCustomerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['contactId'] == null) {
            throw new runtime.RequiredError(
                'contactId',
                'Required parameter "contactId" was null or undefined when calling addCustomer().'
            );
        }

        if (requestParameters['registerCustomerReq'] == null) {
            throw new runtime.RequiredError(
                'registerCustomerReq',
                'Required parameter "registerCustomerReq" was null or undefined when calling addCustomer().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/addCustomer/{contactId}`.replace(`{${"contactId"}}`, encodeURIComponent(String(requestParameters['contactId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterCustomerReqToJSON(requestParameters['registerCustomerReq']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async addCustomer(requestParameters: AddCustomerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addCustomerRaw(requestParameters, initOverrides);
    }

    /**
     */
    async addUserRaw(requestParameters: AddUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['registrationReq'] == null) {
            throw new runtime.RequiredError(
                'registrationReq',
                'Required parameter "registrationReq" was null or undefined when calling addUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/registration`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegistrationReqToJSON(requestParameters['registrationReq']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async addUser(requestParameters: AddUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addUserRaw(requestParameters, initOverrides);
    }

    /**
     */
    async authenticationRaw(requestParameters: AuthenticationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        if (requestParameters['authReq'] == null) {
            throw new runtime.RequiredError(
                'authReq',
                'Required parameter "authReq" was null or undefined when calling authentication().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/auth`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthReqToJSON(requestParameters['authReq']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     */
    async authentication(requestParameters: AuthenticationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.authenticationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteAppointmentRaw(requestParameters: DeleteAppointmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['appointmentId'] == null) {
            throw new runtime.RequiredError(
                'appointmentId',
                'Required parameter "appointmentId" was null or undefined when calling deleteAppointment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/deleteAppointment/{appointmentId}`.replace(`{${"appointmentId"}}`, encodeURIComponent(String(requestParameters['appointmentId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteAppointment(requestParameters: DeleteAppointmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteAppointmentRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteContactEmailRaw(requestParameters: DeleteContactEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['contactEmailReq'] == null) {
            throw new runtime.RequiredError(
                'contactEmailReq',
                'Required parameter "contactEmailReq" was null or undefined when calling deleteContactEmail().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/deleteContactEmail`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: ContactEmailReqToJSON(requestParameters['contactEmailReq']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteContactEmail(requestParameters: DeleteContactEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteContactEmailRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getAllAppointmentByCustomerIdRaw(requestParameters: GetAllAppointmentByCustomerIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Appointment>>> {
        if (requestParameters['customerId'] == null) {
            throw new runtime.RequiredError(
                'customerId',
                'Required parameter "customerId" was null or undefined when calling getAllAppointmentByCustomerId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/allAppointmentByCustomerId/{customerId}`.replace(`{${"customerId"}}`, encodeURIComponent(String(requestParameters['customerId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AppointmentFromJSON));
    }

    /**
     */
    async getAllAppointmentByCustomerId(requestParameters: GetAllAppointmentByCustomerIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Appointment>> {
        const response = await this.getAllAppointmentByCustomerIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getAllContactsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Contact>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/allContacts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ContactFromJSON));
    }

    /**
     */
    async getAllContacts(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Contact>> {
        const response = await this.getAllContactsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getAllCustomersByUserIdRaw(requestParameters: GetAllCustomersByUserIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Customer>>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getAllCustomersByUserId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/allCustomersByContact/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CustomerFromJSON));
    }

    /**
     */
    async getAllCustomersByUserId(requestParameters: GetAllCustomersByUserIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Customer>> {
        const response = await this.getAllCustomersByUserIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getEventsByUserIdRaw(requestParameters: GetEventsByUserIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventListRsp>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getEventsByUserId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/getEvents/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventListRspFromJSON(jsonValue));
    }

    /**
     */
    async getEventsByUserId(requestParameters: GetEventsByUserIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventListRsp> {
        const response = await this.getEventsByUserIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async saveAppointmentRaw(requestParameters: SaveAppointmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['newAppointmentReq'] == null) {
            throw new runtime.RequiredError(
                'newAppointmentReq',
                'Required parameter "newAppointmentReq" was null or undefined when calling saveAppointment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/addAppointment`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewAppointmentReqToJSON(requestParameters['newAppointmentReq']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async saveAppointment(requestParameters: SaveAppointmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.saveAppointmentRaw(requestParameters, initOverrides);
    }

}
