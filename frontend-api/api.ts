/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface Appointment
 */
export interface Appointment {
    /**
     * 
     * @type {number}
     * @memberof Appointment
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof Appointment
     */
    'customerToContactId'?: number;
    /**
     * 
     * @type {string}
     * @memberof Appointment
     */
    'appointmentDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof Appointment
     */
    'reminderDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof Appointment
     */
    'notes'?: string;
}
/**
 * 
 * @export
 * @interface AppointmentReq
 */
export interface AppointmentReq {
    /**
     * 
     * @type {number}
     * @memberof AppointmentReq
     */
    'appId'?: number;
    /**
     * 
     * @type {number}
     * @memberof AppointmentReq
     */
    'customerId'?: number;
    /**
     * 
     * @type {number}
     * @memberof AppointmentReq
     */
    'contactId'?: number;
    /**
     * 
     * @type {string}
     * @memberof AppointmentReq
     */
    'appointmentDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppointmentReq
     */
    'reminderDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppointmentReq
     */
    'notes'?: string;
}
/**
 * 
 * @export
 * @interface AuthReq
 */
export interface AuthReq {
    /**
     * 
     * @type {string}
     * @memberof AuthReq
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthReq
     */
    'password'?: string;
}
/**
 * 
 * @export
 * @interface AuthRsp
 */
export interface AuthRsp {
    /**
     * 
     * @type {string}
     * @memberof AuthRsp
     */
    'token'?: string;
    /**
     * 
     * @type {number}
     * @memberof AuthRsp
     */
    'userId'?: number;
    /**
     * 
     * @type {number}
     * @memberof AuthRsp
     */
    'contactId'?: number;
}
/**
 * 
 * @export
 * @interface Contact
 */
export interface Contact {
    /**
     * 
     * @type {number}
     * @memberof Contact
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Contact
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof Contact
     */
    'lastName'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Contact
     */
    'emails'?: Array<string>;
}
/**
 * 
 * @export
 * @interface Customer
 */
export interface Customer {
    /**
     * 
     * @type {number}
     * @memberof Customer
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Customer
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof Customer
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof Customer
     */
    'phoneNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof Customer
     */
    'vatNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof Customer
     */
    'company'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Customer
     */
    'emails'?: Array<string>;
}
/**
 * 
 * @export
 * @interface EmailReq
 */
export interface EmailReq {
    /**
     * 
     * @type {number}
     * @memberof EmailReq
     */
    'id'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof EmailReq
     */
    'email'?: Array<string>;
}
/**
 * 
 * @export
 * @interface Event
 */
export interface Event {
    /**
     * 
     * @type {string}
     * @memberof Event
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof Event
     */
    'date'?: string;
}
/**
 * 
 * @export
 * @interface EventListRsp
 */
export interface EventListRsp {
    /**
     * 
     * @type {Array<Event>}
     * @memberof EventListRsp
     */
    'evAppointment'?: Array<Event>;
    /**
     * 
     * @type {Array<Event>}
     * @memberof EventListRsp
     */
    'evReminder'?: Array<Event>;
}
/**
 * 
 * @export
 * @interface NewCustomerReq
 */
export interface NewCustomerReq {
    /**
     * 
     * @type {string}
     * @memberof NewCustomerReq
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewCustomerReq
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewCustomerReq
     */
    'phoneNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewCustomerReq
     */
    'vatNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewCustomerReq
     */
    'company'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof NewCustomerReq
     */
    'email'?: Array<string>;
}
/**
 * 
 * @export
 * @interface NewNoteReq
 */
export interface NewNoteReq {
    /**
     * 
     * @type {string}
     * @memberof NewNoteReq
     */
    'note'?: string;
    /**
     * 
     * @type {number}
     * @memberof NewNoteReq
     */
    'appointmentId'?: number;
}
/**
 * 
 * @export
 * @interface RegistrationReq
 */
export interface RegistrationReq {
    /**
     * 
     * @type {string}
     * @memberof RegistrationReq
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegistrationReq
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegistrationReq
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegistrationReq
     */
    'lastName'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof RegistrationReq
     */
    'email'?: Array<string>;
}

/**
 * AuthControllerApi - axios parameter creator
 * @export
 */
export const AuthControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AuthReq} authReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticate: async (authReq: AuthReq, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authReq' is not null or undefined
            assertParamExists('authenticate', 'authReq', authReq)
            const localVarPath = `/api/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RegistrationReq} registrationReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register: async (registrationReq: RegistrationReq, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'registrationReq' is not null or undefined
            assertParamExists('register', 'registrationReq', registrationReq)
            const localVarPath = `/api/auth/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registrationReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthControllerApi - functional programming interface
 * @export
 */
export const AuthControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {AuthReq} authReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authenticate(authReq: AuthReq, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthRsp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authenticate(authReq, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthControllerApi.authenticate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {RegistrationReq} registrationReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async register(registrationReq: RegistrationReq, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthRsp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.register(registrationReq, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthControllerApi.register']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthControllerApi - factory interface
 * @export
 */
export const AuthControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {AuthReq} authReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticate(authReq: AuthReq, options?: RawAxiosRequestConfig): AxiosPromise<AuthRsp> {
            return localVarFp.authenticate(authReq, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RegistrationReq} registrationReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register(registrationReq: RegistrationReq, options?: RawAxiosRequestConfig): AxiosPromise<AuthRsp> {
            return localVarFp.register(registrationReq, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthControllerApi - interface
 * @export
 * @interface AuthControllerApi
 */
export interface AuthControllerApiInterface {
    /**
     * 
     * @param {AuthReq} authReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthControllerApiInterface
     */
    authenticate(authReq: AuthReq, options?: RawAxiosRequestConfig): AxiosPromise<AuthRsp>;

    /**
     * 
     * @param {RegistrationReq} registrationReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthControllerApiInterface
     */
    register(registrationReq: RegistrationReq, options?: RawAxiosRequestConfig): AxiosPromise<AuthRsp>;

}

/**
 * AuthControllerApi - object-oriented interface
 * @export
 * @class AuthControllerApi
 * @extends {BaseAPI}
 */
export class AuthControllerApi extends BaseAPI implements AuthControllerApiInterface {
    /**
     * 
     * @param {AuthReq} authReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthControllerApi
     */
    public authenticate(authReq: AuthReq, options?: RawAxiosRequestConfig) {
        return AuthControllerApiFp(this.configuration).authenticate(authReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RegistrationReq} registrationReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthControllerApi
     */
    public register(registrationReq: RegistrationReq, options?: RawAxiosRequestConfig) {
        return AuthControllerApiFp(this.configuration).register(registrationReq, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * EmailControllerApi - axios parameter creator
 * @export
 */
export const EmailControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendEmail: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/test/sendEmail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmailControllerApi - functional programming interface
 * @export
 */
export const EmailControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EmailControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendEmail(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendEmail(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EmailControllerApi.sendEmail']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * EmailControllerApi - factory interface
 * @export
 */
export const EmailControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EmailControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendEmail(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.sendEmail(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EmailControllerApi - interface
 * @export
 * @interface EmailControllerApi
 */
export interface EmailControllerApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailControllerApiInterface
     */
    sendEmail(options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * EmailControllerApi - object-oriented interface
 * @export
 * @class EmailControllerApi
 * @extends {BaseAPI}
 */
export class EmailControllerApi extends BaseAPI implements EmailControllerApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailControllerApi
     */
    public sendEmail(options?: RawAxiosRequestConfig) {
        return EmailControllerApiFp(this.configuration).sendEmail(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ReminderControllerApi - axios parameter creator
 * @export
 */
export const ReminderControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {NewNoteReq} newNoteReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAppointmentNote: async (newNoteReq: NewNoteReq, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'newNoteReq' is not null or undefined
            assertParamExists('addAppointmentNote', 'newNoteReq', newNoteReq)
            const localVarPath = `/api/addAppointmentNote`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newNoteReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {EmailReq} emailReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addContactEmail: async (emailReq: EmailReq, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'emailReq' is not null or undefined
            assertParamExists('addContactEmail', 'emailReq', emailReq)
            const localVarPath = `/api/addContactEmail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(emailReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} contactId 
         * @param {NewCustomerReq} newCustomerReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCustomer: async (contactId: number, newCustomerReq: NewCustomerReq, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contactId' is not null or undefined
            assertParamExists('addCustomer', 'contactId', contactId)
            // verify required parameter 'newCustomerReq' is not null or undefined
            assertParamExists('addCustomer', 'newCustomerReq', newCustomerReq)
            const localVarPath = `/api/addCustomer/{contactId}`
                .replace(`{${"contactId"}}`, encodeURIComponent(String(contactId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newCustomerReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {EmailReq} emailReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCustomerEmail: async (emailReq: EmailReq, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'emailReq' is not null or undefined
            assertParamExists('addCustomerEmail', 'emailReq', emailReq)
            const localVarPath = `/api/addCustomerEmail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(emailReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} appointmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAppointment: async (appointmentId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appointmentId' is not null or undefined
            assertParamExists('deleteAppointment', 'appointmentId', appointmentId)
            const localVarPath = `/api/deleteAppointment/{appointmentId}`
                .replace(`{${"appointmentId"}}`, encodeURIComponent(String(appointmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {EmailReq} emailReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteContactEmail: async (emailReq: EmailReq, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'emailReq' is not null or undefined
            assertParamExists('deleteContactEmail', 'emailReq', emailReq)
            const localVarPath = `/api/deleteContactEmail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(emailReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {EmailReq} emailReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustomerEmail: async (emailReq: EmailReq, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'emailReq' is not null or undefined
            assertParamExists('deleteCustomerEmail', 'emailReq', emailReq)
            const localVarPath = `/api/deleteCustomerEmail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(emailReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} customerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAppointmentByCustomerId: async (customerId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('getAllAppointmentByCustomerId', 'customerId', customerId)
            const localVarPath = `/api/allAppointmentByCustomerId/{customerId}`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllContacts: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/allContacts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCustomersByUserId: async (userId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getAllCustomersByUserId', 'userId', userId)
            const localVarPath = `/api/allCustomersByContact/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventsByUserId: async (userId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getEventsByUserId', 'userId', userId)
            const localVarPath = `/api/getEvents/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AppointmentReq} appointmentReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveAppointment: async (appointmentReq: AppointmentReq, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appointmentReq' is not null or undefined
            assertParamExists('saveAppointment', 'appointmentReq', appointmentReq)
            const localVarPath = `/api/addAppointment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(appointmentReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReminderControllerApi - functional programming interface
 * @export
 */
export const ReminderControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReminderControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {NewNoteReq} newNoteReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addAppointmentNote(newNoteReq: NewNoteReq, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addAppointmentNote(newNoteReq, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReminderControllerApi.addAppointmentNote']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {EmailReq} emailReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addContactEmail(emailReq: EmailReq, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addContactEmail(emailReq, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReminderControllerApi.addContactEmail']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} contactId 
         * @param {NewCustomerReq} newCustomerReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addCustomer(contactId: number, newCustomerReq: NewCustomerReq, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addCustomer(contactId, newCustomerReq, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReminderControllerApi.addCustomer']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {EmailReq} emailReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addCustomerEmail(emailReq: EmailReq, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addCustomerEmail(emailReq, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReminderControllerApi.addCustomerEmail']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} appointmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAppointment(appointmentId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAppointment(appointmentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReminderControllerApi.deleteAppointment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {EmailReq} emailReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteContactEmail(emailReq: EmailReq, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteContactEmail(emailReq, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReminderControllerApi.deleteContactEmail']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {EmailReq} emailReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCustomerEmail(emailReq: EmailReq, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCustomerEmail(emailReq, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReminderControllerApi.deleteCustomerEmail']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} customerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllAppointmentByCustomerId(customerId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Appointment>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllAppointmentByCustomerId(customerId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReminderControllerApi.getAllAppointmentByCustomerId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllContacts(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Contact>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllContacts(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReminderControllerApi.getAllContacts']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllCustomersByUserId(userId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Customer>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllCustomersByUserId(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReminderControllerApi.getAllCustomersByUserId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEventsByUserId(userId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventListRsp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEventsByUserId(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReminderControllerApi.getEventsByUserId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {AppointmentReq} appointmentReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveAppointment(appointmentReq: AppointmentReq, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveAppointment(appointmentReq, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReminderControllerApi.saveAppointment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ReminderControllerApi - factory interface
 * @export
 */
export const ReminderControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReminderControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {NewNoteReq} newNoteReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAppointmentNote(newNoteReq: NewNoteReq, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addAppointmentNote(newNoteReq, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EmailReq} emailReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addContactEmail(emailReq: EmailReq, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addContactEmail(emailReq, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} contactId 
         * @param {NewCustomerReq} newCustomerReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCustomer(contactId: number, newCustomerReq: NewCustomerReq, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addCustomer(contactId, newCustomerReq, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EmailReq} emailReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCustomerEmail(emailReq: EmailReq, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addCustomerEmail(emailReq, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} appointmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAppointment(appointmentId: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteAppointment(appointmentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EmailReq} emailReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteContactEmail(emailReq: EmailReq, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteContactEmail(emailReq, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EmailReq} emailReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustomerEmail(emailReq: EmailReq, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteCustomerEmail(emailReq, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} customerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAppointmentByCustomerId(customerId: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<Appointment>> {
            return localVarFp.getAllAppointmentByCustomerId(customerId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllContacts(options?: RawAxiosRequestConfig): AxiosPromise<Array<Contact>> {
            return localVarFp.getAllContacts(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCustomersByUserId(userId: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<Customer>> {
            return localVarFp.getAllCustomersByUserId(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventsByUserId(userId: number, options?: RawAxiosRequestConfig): AxiosPromise<EventListRsp> {
            return localVarFp.getEventsByUserId(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AppointmentReq} appointmentReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveAppointment(appointmentReq: AppointmentReq, options?: RawAxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.saveAppointment(appointmentReq, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReminderControllerApi - interface
 * @export
 * @interface ReminderControllerApi
 */
export interface ReminderControllerApiInterface {
    /**
     * 
     * @param {NewNoteReq} newNoteReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReminderControllerApiInterface
     */
    addAppointmentNote(newNoteReq: NewNoteReq, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {EmailReq} emailReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReminderControllerApiInterface
     */
    addContactEmail(emailReq: EmailReq, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {number} contactId 
     * @param {NewCustomerReq} newCustomerReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReminderControllerApiInterface
     */
    addCustomer(contactId: number, newCustomerReq: NewCustomerReq, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {EmailReq} emailReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReminderControllerApiInterface
     */
    addCustomerEmail(emailReq: EmailReq, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {number} appointmentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReminderControllerApiInterface
     */
    deleteAppointment(appointmentId: number, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {EmailReq} emailReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReminderControllerApiInterface
     */
    deleteContactEmail(emailReq: EmailReq, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {EmailReq} emailReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReminderControllerApiInterface
     */
    deleteCustomerEmail(emailReq: EmailReq, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {number} customerId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReminderControllerApiInterface
     */
    getAllAppointmentByCustomerId(customerId: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<Appointment>>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReminderControllerApiInterface
     */
    getAllContacts(options?: RawAxiosRequestConfig): AxiosPromise<Array<Contact>>;

    /**
     * 
     * @param {number} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReminderControllerApiInterface
     */
    getAllCustomersByUserId(userId: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<Customer>>;

    /**
     * 
     * @param {number} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReminderControllerApiInterface
     */
    getEventsByUserId(userId: number, options?: RawAxiosRequestConfig): AxiosPromise<EventListRsp>;

    /**
     * 
     * @param {AppointmentReq} appointmentReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReminderControllerApiInterface
     */
    saveAppointment(appointmentReq: AppointmentReq, options?: RawAxiosRequestConfig): AxiosPromise<number>;

}

/**
 * ReminderControllerApi - object-oriented interface
 * @export
 * @class ReminderControllerApi
 * @extends {BaseAPI}
 */
export class ReminderControllerApi extends BaseAPI implements ReminderControllerApiInterface {
    /**
     * 
     * @param {NewNoteReq} newNoteReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReminderControllerApi
     */
    public addAppointmentNote(newNoteReq: NewNoteReq, options?: RawAxiosRequestConfig) {
        return ReminderControllerApiFp(this.configuration).addAppointmentNote(newNoteReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {EmailReq} emailReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReminderControllerApi
     */
    public addContactEmail(emailReq: EmailReq, options?: RawAxiosRequestConfig) {
        return ReminderControllerApiFp(this.configuration).addContactEmail(emailReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} contactId 
     * @param {NewCustomerReq} newCustomerReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReminderControllerApi
     */
    public addCustomer(contactId: number, newCustomerReq: NewCustomerReq, options?: RawAxiosRequestConfig) {
        return ReminderControllerApiFp(this.configuration).addCustomer(contactId, newCustomerReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {EmailReq} emailReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReminderControllerApi
     */
    public addCustomerEmail(emailReq: EmailReq, options?: RawAxiosRequestConfig) {
        return ReminderControllerApiFp(this.configuration).addCustomerEmail(emailReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} appointmentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReminderControllerApi
     */
    public deleteAppointment(appointmentId: number, options?: RawAxiosRequestConfig) {
        return ReminderControllerApiFp(this.configuration).deleteAppointment(appointmentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {EmailReq} emailReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReminderControllerApi
     */
    public deleteContactEmail(emailReq: EmailReq, options?: RawAxiosRequestConfig) {
        return ReminderControllerApiFp(this.configuration).deleteContactEmail(emailReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {EmailReq} emailReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReminderControllerApi
     */
    public deleteCustomerEmail(emailReq: EmailReq, options?: RawAxiosRequestConfig) {
        return ReminderControllerApiFp(this.configuration).deleteCustomerEmail(emailReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} customerId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReminderControllerApi
     */
    public getAllAppointmentByCustomerId(customerId: number, options?: RawAxiosRequestConfig) {
        return ReminderControllerApiFp(this.configuration).getAllAppointmentByCustomerId(customerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReminderControllerApi
     */
    public getAllContacts(options?: RawAxiosRequestConfig) {
        return ReminderControllerApiFp(this.configuration).getAllContacts(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReminderControllerApi
     */
    public getAllCustomersByUserId(userId: number, options?: RawAxiosRequestConfig) {
        return ReminderControllerApiFp(this.configuration).getAllCustomersByUserId(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReminderControllerApi
     */
    public getEventsByUserId(userId: number, options?: RawAxiosRequestConfig) {
        return ReminderControllerApiFp(this.configuration).getEventsByUserId(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AppointmentReq} appointmentReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReminderControllerApi
     */
    public saveAppointment(appointmentReq: AppointmentReq, options?: RawAxiosRequestConfig) {
        return ReminderControllerApiFp(this.configuration).saveAppointment(appointmentReq, options).then((request) => request(this.axios, this.basePath));
    }
}



